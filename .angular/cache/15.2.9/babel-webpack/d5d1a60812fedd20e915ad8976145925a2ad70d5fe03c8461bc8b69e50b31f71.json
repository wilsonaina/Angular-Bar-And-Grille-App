{"ast":null,"code":"var _class;\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = [];\n    this.localStorageCart = [];\n  }\n  addToCart(product) {\n    return new Observable(subscriber => {\n      if (product) {\n        // Check if customer has items in cart session\n        if (localStorage.getItem('customer_cart')) {\n          this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n          // Check if product already exists in cart\n          const isProductAlreadyCart = this.cart.find(cartItem => {\n            return cartItem.sku === product.sku;\n          });\n          // If product exits in the cart, we just update the current cart product and increment\n          // the quantity value plus 1\n          if (isProductAlreadyCart) {\n            const cartItemIndex = this.cart.indexOf(isProductAlreadyCart);\n            const newCartItem = {\n              ...isProductAlreadyCart,\n              quantity: isProductAlreadyCart.quantity + 1\n            };\n            this.cart.splice(cartItemIndex, 1, newCartItem);\n            localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n            subscriber.next();\n            subscriber.complete();\n          } else {\n            console.log('This is a new product added');\n            this.cart.push(product);\n            // Set the cart object with the newly added product\n            localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n            subscriber.next();\n            subscriber.complete();\n          }\n        } else {\n          this.localStorageCart.push(product);\n          localStorage.setItem('customer_cart', JSON.stringify(this.localStorageCart));\n          subscriber.next();\n          subscriber.complete();\n        }\n        this.getCartItemCount();\n      }\n    });\n  }\n  getCartProductsFromLocaleStorage() {\n    return new Observable(subscriber => {\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        const customerCart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n        subscriber.next(customerCart);\n        subscriber.complete();\n      } else {\n        const noItemsInTheCart = `There's no items in the cart`;\n        subscriber.next(false);\n        subscriber.complete();\n      }\n    });\n  }\n  getCartItemCount() {\n    return new Observable(subscriber => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      // Check if theres items in the cart\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        const totalCartItemCount = this.cart.reduce((total, sum) => {\n          return total + sum.quantity;\n        }, 0);\n        subscriber.next(totalCartItemCount);\n        subscriber.complete();\n      } else {\n        subscriber.next(0);\n        subscriber.complete();\n      }\n    });\n  }\n  clearCart() {\n    return new Observable(subscriber => {\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        localStorage.removeItem('customer_cart');\n        subscriber.next();\n        subscriber.complete();\n      } else {\n        subscriber.next('Theres no locale storage object available');\n        subscriber.complete();\n      }\n    });\n  }\n  removeCartItem(sku, index) {\n    return new Observable(subscriber => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (this.cart) {\n        this.cart.splice(index, 1);\n        // Set the cart object without the remove cart item\n        localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n        subscriber.next(true);\n        subscriber.complete();\n      } else {\n        subscriber.next(false);\n        subscriber.complete();\n      }\n    });\n  }\n  priceCartTotal() {\n    return new Observable(subscriber => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        this.cartTotalPrice = this.cart.reduce((total, currentValue) => {\n          return Number(currentValue.displayPrice) + total;\n        }, 0);\n        subscriber.next(this.cartTotalPrice);\n        subscriber.complete();\n      } else {\n        subscriber.next(0);\n        subscriber.complete();\n      }\n    });\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","CartService","constructor","addToCart","product","subscriber","localStorage","getItem","cart","JSON","parse","isProductAlreadyCart","find","cartItem","sku","cartItemIndex","indexOf","newCartItem","quantity","splice","setItem","stringify","next","complete","console","log","push","localStorageCart","getCartItemCount","getCartProductsFromLocaleStorage","customerCart","noItemsInTheCart","totalCartItemCount","reduce","total","sum","clearCart","removeItem","removeCartItem","index","priceCartTotal","cartTotalPrice","currentValue","Number","displayPrice","factory","providedIn"],"sourceRoot":"","sources":["/Users/MrWilson/Desktop/Angular_Apps/sundays_bar_and_grille_app/src/app/shared/services/cart/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  cart: any[] = [];\n  localStorageCart: any[] = [];\n  cartItemQuantity: number;\n  cartTotalPrice: number;\n\n  constructor() {\n  }\n\n  addToCart(product: Product): Observable<any> {\n    return new Observable((subscriber) => {\n      if (product) {\n        // Check if customer has items in cart session\n        if (localStorage.getItem('customer_cart')) {\n          this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n\n          // Check if product already exists in cart\n          const isProductAlreadyCart = this.cart.find(\n            (cartItem: Product)=> {\n              return cartItem.sku === product.sku\n            });\n          // If product exits in the cart, we just update the current cart product and increment\n          // the quantity value plus 1\n          if (isProductAlreadyCart) {\n            const cartItemIndex = this.cart.indexOf(isProductAlreadyCart);\n            const newCartItem: Product = {\n              ...isProductAlreadyCart,\n              quantity: isProductAlreadyCart.quantity + 1\n            }\n            this.cart.splice(cartItemIndex, 1, newCartItem);\n            localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n            subscriber.next();\n            subscriber.complete();\n          } else {\n            console.log('This is a new product added');\n            this.cart.push(product);\n            // Set the cart object with the newly added product\n            localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n            subscriber.next();\n            subscriber.complete();\n          }\n        } else {\n          this.localStorageCart.push(product);\n          localStorage.setItem('customer_cart', JSON.stringify(this.localStorageCart));\n          subscriber.next();\n          subscriber.complete();\n        }\n        this.getCartItemCount();\n      }\n    })\n  }\n\n  getCartProductsFromLocaleStorage(): Observable<any> {\n    return new Observable((subscriber) => {\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        const customerCart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n        subscriber.next(customerCart);\n        subscriber.complete();\n      } else {\n        const noItemsInTheCart = `There's no items in the cart`;\n        subscriber.next(false);\n        subscriber.complete();\n      }\n    });\n  }\n\n  getCartItemCount(): Observable<number> {\n    return new Observable<number>((subscriber) => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      // Check if theres items in the cart\n      if (localStorage && localStorage.getItem('customer_cart')) {\n          const totalCartItemCount = this.cart.reduce((total, sum: Product) => {\n            return total + sum.quantity\n          }, 0);\n          subscriber.next(totalCartItemCount);\n          subscriber.complete();\n      } else {\n        subscriber.next(0);\n        subscriber.complete();\n      }\n    });\n  }\n\n  clearCart() {\n    return new Observable((subscriber) => {\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        localStorage.removeItem('customer_cart');\n        subscriber.next();\n        subscriber.complete();\n      } else {\n        subscriber.next('Theres no locale storage object available');\n        subscriber.complete();\n      }\n    })\n  }\n\n  removeCartItem(sku: string, index: number): Observable<any> {\n    return new Observable((subscriber) => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (this.cart) {\n        this.cart.splice(index, 1);\n        // Set the cart object without the remove cart item\n        localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n        subscriber.next(true);\n        subscriber.complete();\n      } else {\n        subscriber.next(false);\n        subscriber.complete();\n      }\n    });\n  }\n\n  priceCartTotal() {\n    return new Observable<number>((subscriber) => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        this.cartTotalPrice = this.cart.reduce((total, currentValue:Product) => {\n          return Number(currentValue.displayPrice) + total;\n        }, 0);\n        subscriber.next(this.cartTotalPrice);\n        subscriber.complete();\n      } else {\n        subscriber.next(0);\n        subscriber.complete();\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}