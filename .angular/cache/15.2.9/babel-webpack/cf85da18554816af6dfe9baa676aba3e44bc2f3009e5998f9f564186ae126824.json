{"ast":null,"code":"var _class;\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = [];\n    this.localStorageCart = [];\n    this.updatedCart = [];\n  }\n  addToCart(product) {\n    return new Observable(subscriber => {\n      if (product) {\n        // Check if customer has items in cart session\n        if (localStorage.getItem('customer_cart')) {} else {\n          debugger;\n          this.cart.push(product);\n          localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n          subscriber.next();\n          subscriber.complete();\n        }\n      }\n    });\n  }\n  getCartProductsFromLocaleStorage() {\n    return new Observable(subscriber => {\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        const customerCart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n        subscriber.next(customerCart);\n        subscriber.complete();\n      } else {\n        const error = `There's no items in the cart`;\n        subscriber.error(error);\n        subscriber.complete();\n      }\n    });\n  }\n  getCartItemCount() {\n    return new Observable(subscriber => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (this.cart && this.cart.length) {\n        subscriber.next(this.cart.length);\n        subscriber.complete();\n      } else {\n        const error = 'Count cart is 0';\n        subscriber.error(error);\n        subscriber.complete();\n      }\n    });\n  }\n  clearCart() {}\n  removeCartItem(sku, index) {\n    return new Observable(subscriber => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (this.cart) {\n        this.cart.splice(index, 1);\n        // Set the cart object without the remove cart item\n        localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n        subscriber.next(this.cart);\n        subscriber.complete();\n      } else {\n        subscriber.error('No items to remove in cart');\n        subscriber.complete();\n      }\n    });\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,UAAU,QAAQ,MAAM;;AAMjC,OAAM,MAAOC,WAAW;EAKtBC;IAJA,SAAI,GAAU,EAAE;IAChB,qBAAgB,GAAU,EAAE;IAC5B,gBAAW,GAAU,EAAE;EAGvB;EAEAC,SAAS,CAACC,OAAgB;IACxB,OAAO,IAAIJ,UAAU,CAAEK,UAAU,IAAI;MACnC,IAAID,OAAO,EAAE;QACX;QACA,IAAIE,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,EAAE,EAC1C,MAAM;UACL;UACA,IAAI,CAACC,IAAI,CAACC,IAAI,CAACL,OAAO,CAAC;UACvBE,YAAY,CAACI,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACJ,IAAI,CAAC,CAAC;UAChEH,UAAU,CAACQ,IAAI,EAAE;UACjBR,UAAU,CAACS,QAAQ,EAAE;;;IAG3B,CAAC,CAAC;EACJ;EAEAC,gCAAgC;IAC9B,OAAO,IAAIf,UAAU,CAAEK,UAAU,IAAI;MACnC,IAAIC,YAAY,IAAIA,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,EAAE;QACzD,MAAMS,YAAY,GAAGL,IAAI,CAACM,KAAK,CAACX,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;QAC9EF,UAAU,CAACQ,IAAI,CAACG,YAAY,CAAC;QAC7BX,UAAU,CAACS,QAAQ,EAAE;OACtB,MAAM;QACL,MAAMI,KAAK,GAAG,8BAA8B;QAC5Cb,UAAU,CAACa,KAAK,CAACA,KAAK,CAAC;QACvBb,UAAU,CAACS,QAAQ,EAAE;;IAEzB,CAAC,CAAC;EACJ;EAEAK,gBAAgB;IACd,OAAO,IAAInB,UAAU,CAAUK,UAAU,IAAI;MAC3C,IAAI,CAACG,IAAI,GAAGG,IAAI,CAACM,KAAK,CAACX,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;MACrE,IAAI,IAAI,CAACC,IAAI,IAAI,IAAI,CAACA,IAAI,CAACY,MAAM,EAAE;QACjCf,UAAU,CAACQ,IAAI,CAAC,IAAI,CAACL,IAAI,CAACY,MAAM,CAAC;QACjCf,UAAU,CAACS,QAAQ,EAAE;OACtB,MAAM;QACL,MAAMI,KAAK,GAAG,iBAAiB;QAC/Bb,UAAU,CAACa,KAAK,CAACA,KAAK,CAAC;QACvBb,UAAU,CAACS,QAAQ,EAAE;;IAEzB,CAAC,CAAC;EACJ;EAEAO,SAAS,IAAI;EAEbC,cAAc,CAACC,GAAW,EAAEC,KAAa;IACvC,OAAO,IAAIxB,UAAU,CAAEK,UAAU,IAAI;MACnC,IAAI,CAACG,IAAI,GAAGG,IAAI,CAACM,KAAK,CAACX,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;MACrE,IAAI,IAAI,CAACC,IAAI,EAAE;QACb,IAAI,CAACA,IAAI,CAACiB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;QAC1B;QACAlB,YAAY,CAACI,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACJ,IAAI,CAAC,CAAC;QAChEH,UAAU,CAACQ,IAAI,CAAC,IAAI,CAACL,IAAI,CAAC;QAC1BH,UAAU,CAACS,QAAQ,EAAE;OACtB,MAAM;QACLT,UAAU,CAACa,KAAK,CAAC,4BAA4B,CAAC;QAC9Cb,UAAU,CAACS,QAAQ,EAAE;;IAEzB,CAAC,CAAC;EACJ;;SApEWb,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAyB,SAAXzB,MAAW;EAAA0B,YAFV;AAAM","names":["Observable","CartService","constructor","addToCart","product","subscriber","localStorage","getItem","cart","push","setItem","JSON","stringify","next","complete","getCartProductsFromLocaleStorage","customerCart","parse","error","getCartItemCount","length","clearCart","removeCartItem","sku","index","splice","factory","providedIn"],"sourceRoot":"","sources":["/Users/MrWilson/Desktop/Angular_Apps/sundays_bar_and_grille_app/src/app/shared/services/cart/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  cart: any[] = [];\n  localStorageCart: any[] = [];\n  updatedCart: any[] = [];\n\n  constructor() {\n  }\n\n  addToCart(product: Product): Observable<any> {\n    return new Observable((subscriber) => {\n      if (product) {\n        // Check if customer has items in cart session\n        if (localStorage.getItem('customer_cart')) {\n        } else {\n          debugger;\n          this.cart.push(product);\n          localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n          subscriber.next();\n          subscriber.complete();\n        }\n      }\n    })\n  }\n\n  getCartProductsFromLocaleStorage(): Observable<any> {\n    return new Observable((subscriber) => {\n      if (localStorage && localStorage.getItem('customer_cart')) {\n        const customerCart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n        subscriber.next(customerCart);\n        subscriber.complete();\n      } else {\n        const error = `There's no items in the cart`;\n        subscriber.error(error);\n        subscriber.complete();\n      }\n    });\n  }\n\n  getCartItemCount(): Observable<number> {\n    return new Observable<number>((subscriber) => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (this.cart && this.cart.length) {\n        subscriber.next(this.cart.length);\n        subscriber.complete();\n      } else {\n        const error = 'Count cart is 0';\n        subscriber.error(error);\n        subscriber.complete();\n      }\n    });\n  }\n\n  clearCart() {}\n\n  removeCartItem(sku: string, index: number): Observable<any> {\n    return new Observable((subscriber) => {\n      this.cart = JSON.parse(localStorage.getItem('customer_cart') || '{}');\n      if (this.cart) {\n        this.cart.splice(index, 1);\n        // Set the cart object without the remove cart item\n        localStorage.setItem('customer_cart', JSON.stringify(this.cart));\n        subscriber.next(this.cart);\n        subscriber.complete();\n      } else {\n        subscriber.error('No items to remove in cart');\n        subscriber.complete();\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}